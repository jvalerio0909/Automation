package Utilities;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
//conexion de archivos
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.SecureRandom;
import java.util.*;

//web driver
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.support.ui.Select;
import java.time.LocalDateTime;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

public class Utilities {

	static SecureRandom secureRnd = new SecureRandom();

	public static WebDriver driver;
	static {
		driver = getDriver();
	}

	public static WebDriver getDriver() {

		try {
			Properties obj = new Properties();
			FileInputStream objfile = new FileInputStream(System.getProperty("user.dir") + "\\src\\config.properties");
			obj.load(objfile);

			switch (obj.getProperty("DriverType")) {
			case "CHROME":
				System.setProperty("webdriver.chrome.driver", obj.getProperty("chromedriverpath"));
				ChromeOptions chromeOptions = new ChromeOptions();
				chromeOptions.addArguments("--start-maximized");
				driver = new ChromeDriver(chromeOptions);
				driver.manage().window().maximize();
				break;

			case "FIREFOX":
				System.setProperty("webdriver.gecko.driver", obj.getProperty("geckodriverpath"));
				FirefoxOptions dc = new FirefoxOptions();
				dc.setCapability("marionette", true);
				dc.addArguments("--lang=en-US");
				driver = new FirefoxDriver(dc);
				driver.manage().window().maximize();
				break;
			}
		} catch (Exception e) {

		}
		return driver;

	}

	public static void esperar(int tiempo) {
		try {
			Thread.sleep(tiempo);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public ArrayList<String> vector(String inputTestCase) {
		ArrayList<String> mivector = new ArrayList<String>();
		try {
			Workbook workbook = Workbook.getWorkbook(new File("C:\\Automation\\Workspace\\QAAutomation_Test\\src\\Datadriven\\GAP.xlsx"));
			Sheet sheet = workbook.getSheet(inputTestCase);
			int indiceColumnaLeer = sheet.getColumns();
			int indiceFilas = sheet.getRows();
			System.out.println("Sheet de Test Case: " + sheet.getName());
			System.out.println("col: " + indiceColumnaLeer + ",Fil: " + indiceFilas);
			for (int columna = 1; columna <= indiceColumnaLeer - 1; columna++) {
				for (int fila = 1; fila <= indiceFilas - 1; fila++) {
					mivector.add(sheet.getCell(columna, fila).getContents());
				}
			}
		} catch (Exception e) {
			System.out.println("Ocurrio un error" + e.getMessage());
		}
		return mivector;
	}

	public ArrayList<String> getFirstRow(String inputTestCase) {
		ArrayList<String> firstRow = new ArrayList<String>();
		try {
			Workbook workbook = Workbook.getWorkbook(new File("C:\\Automation\\Workspace\\QAAutomation_Test\\src\\Datadriven\\GAP.xlsx"));
			Sheet sheet = workbook.getSheet(inputTestCase);
			int indiceColumnaLeer = sheet.getColumns();
			int indiceFilas = sheet.getRows();
			System.out.println("Sheet de Test Case: " + sheet.getName());
			System.out.println("col: " + indiceColumnaLeer + ",Fil: " + indiceFilas);
			int fila = 1;
			for (int columna = 1; columna <= indiceColumnaLeer - 1; columna++) {
				firstRow.add(sheet.getCell(columna, fila).getContents());
			}
		} catch (Exception e) {
			System.out.println("Ocurrio un error" + e.getMessage());
		}
		return firstRow;
	}

	// Seleccionar valor en el combo
	public void SelectComboBox(WebElement comboB, String valor) {
		Select combo = new Select(comboB);
		combo.selectByValue(valor);
	}

	// método personalizado para leer datos excel
	public String[][] getExcelData(String fileName, String sheetName) {
		String[][] arrayExcelData = null;
		try {
			FileInputStream fs = new FileInputStream(fileName);
			Workbook wb = Workbook.getWorkbook(fs);
			Sheet sh = wb.getSheet(sheetName);
			int totalNoOfCols = sh.getColumns();
			int totalNoOfRows = sh.getRows();
			arrayExcelData = new String[totalNoOfRows - 1][totalNoOfCols];
			for (int i = 1; i < totalNoOfRows; i++) {
				for (int j = 0; j < totalNoOfCols; j++) {
					arrayExcelData[i - 1][j] = sh.getCell(j, i).getContents();
				}

			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
			e.printStackTrace();
		} catch (BiffException e) {
			e.printStackTrace();
		}
		return arrayExcelData;
	}

	public void waitForContent(WebElement webElement, String attribute) {
		int i = 0;
		String text;
		while (i < 90) {
			text = webElement.getAttribute(attribute);
			if (text.equals("")) {
				esperar(1000);
				i++;
			} else {
				break;
			}
		}
	}

}